<?php

namespace Purmeo\EshopBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Purmeo\EshopBundle\Entity\Orders;

/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdersRepository extends EntityRepository {

    public function setOrderNumber($session, $params) {
        $ch = curl_init($params['OMUrl']);

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "operation=requestordernumbers" .
                "&company=10" .
                "&source=" .
                "&data=1");
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
        curl_setopt($ch, CURLOPT_TIMEOUT, 600);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect: '));
        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
        curl_setopt($ch, CURLOPT_USERPWD, $params['OMUsr'] . ":" . $params['OMPwd']);

        $orderNumber = curl_exec($ch);

        curl_close($ch);

        $session->set('orderNumber', $orderNumber);
    }

    public function sendComponentsToOM($componentsXML, $params) {

        $components = utf8_encode($componentsXML->getContent());

        $dom = new \DOMDocument();
        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = false;
        $dom->loadXML($components);
        $components = $dom->saveXML();
        $components = trim($components);
        $components = urlencode($components);

        $ch = curl_init($params['OMUrl']);

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "operation=updateorder" .
                "&company=10" .
                "&source=" .
                "&data=" . $components);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
        curl_setopt($ch, CURLOPT_TIMEOUT, 600);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect: '));
        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
        curl_setopt($ch, CURLOPT_USERPWD, $params['OMUsr'] . ":" . $params['OMPwd']);

        $result = curl_exec($ch);

        curl_close($ch);

        $result = trim($result);

        return $result;
    }

    public function getOrderNumber($session) {
        $orderNumber = trim($session->get('orderNumber'));

        return $orderNumber;
    }

    public function createOrder($user, $addresses, $product, $em, $session, $params, $controller) {
        $order = new Orders();
        $order->setCode($this->getOrderNumber($session));
        $order->setUser($user);
        foreach ($addresses as $address) {
            $order->addAddresse($address);
        }
        $order->addProduct($product);
        $order->setStatus(1);
        $order->setCurrency($params['defaultCurrency']);
        $em->persist($order);
        $em->flush();

        $this->sendOrderEmail($user->getEmail(), $order, $controller);
        
        return $order;
    }

    private function sendOrderEmail($email, $order, $controller) {

        $message = \Swift_Message::newInstance()
                ->setSubject('Purmeo')
                ->setFrom('service@purmeo.de')
                ->setTo($email)
                ->setBody(
                $controller->renderView('PurmeoEshopBundle:Order:confirmOrderEmail.html.twig', array(
                    'order' => $order,
                )), 'text/html', 'utf-8');

        $result = $controller->get('mailer')->send($message);

        return $result;
    }

    public function createOrderXML($user, $address, $order, $product, $pay, $controller) {
        return $controller->render('PurmeoEshopBundle:Order:sendOrder.xml.twig', array(
                    'user' => $user,
                    'addresses' => $address,
                    'order' => $order,
                    'product' => $product,
                    'pay' => $pay
                ));
    }

    public function sendOrderToOM($orderXML, $params) {

        $order = utf8_encode($orderXML->getContent());
        $dom = new \DOMDocument();
        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = false;
        $dom->loadXML($order);
        $order = $dom->saveXML();
        $order = trim($order);
        $order = urlencode($order);

        $ch = curl_init($params['OMUrl']);

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "operation=sendorder" .
                "&company=66" .
                "&source=" .
                "&data=" . $order);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
        curl_setopt($ch, CURLOPT_TIMEOUT, 600);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect: '));
        curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
        curl_setopt($ch, CURLOPT_USERPWD, $params['OMUsr'] . ":" . $params['OMPwd']);

        $result = curl_exec($ch);

        curl_close($ch);

        $result = trim($result);

        return $result;
    }

    public function getPayment($selectedMethod, $paymentAmount, $shopperEmail, $productId, $session, $params) {

        
        $paymentAmount = str_replace(',', '', $paymentAmount);
        $paymentAmount = $paymentAmount * 100;
        $result["paymentAmount"] = rawurlencode($paymentAmount);
        
        $currencyCode = $params['defaultCurrency'];
        $result["currencyCode"] = rawurlencode($currencyCode);

        $shipBeforeDate = date("Y-m-d");
        $result["shipBeforeDate"] = rawurlencode($shipBeforeDate);

        $orderCode = $this->getOrderNumber($session);
        $merchantReference = '10;' . $orderCode;
        $result["merchantReference"] = rawurlencode($merchantReference);

        $result['skinCode'] = rawurlencode($params['skinCode']);
        $result['skinCodeException'] = rawurlencode($params['skinCodeException']);

        $merchantAccount = 'Purmeo';
        $result['merchantAccount'] = rawurlencode($merchantAccount);

        $sessionValidity = date('Y-m-d\TH:i:s\Z', time());
        $result["sessionValidity"] = rawurlencode($sessionValidity);

        $merchantReturnData = $session->getId();
        $result["merchantReturnData"] = rawurlencode($merchantReturnData);

        $result["shopperEmail"] = rawurlencode($shopperEmail);

        $shopperReference = $shopperEmail;
        $result["shopperReference"] = rawurlencode($shopperReference);

        $allowedMethods = 'amex,visa,mc';
        if ($selectedMethod === 1)
            $allowedMethods = 'elv';
        $result["allowedMethods"] = rawurlencode($allowedMethods);

        $blockedMethods = 'elv';
        if ($selectedMethod === 1)
            $blockedMethods = 'amex,visa,mc';
        $result["blockedMethods"] = rawurlencode($blockedMethods);

        $offset = "";
        $result["offset"] = rawurlencode($offset);

        $shopperStatement = "";
        $result["shopperStatement"] = rawurlencode($shopperStatement);

        $recurringContract = 'RECURRING';
        $result['recurringContract'] = rawurlencode($recurringContract);

        $billingAddressType = "";
        $result['billingAddressType'] = rawurlencode($billingAddressType);

        $deliveryAddressType = '';
        $result['deliveryAddressType'] = rawurlencode($deliveryAddressType);

        $countryCode = 'DE';
        $result['countryCode'] = $countryCode;

        $langBrowser = $_SERVER['HTTP_ACCEPT_LANGUAGE'];
        $langPosition = strpos($langBrowser, ',');
        $shopperLocale = substr($langBrowser, 0, $langPosition);
        $result['shopperLocale'] = $shopperLocale;

        $orderData = '';
        $result['orderData'] = rawurlencode($orderData);

        $offerEmail = '';
        $result['offerEmail'] = rawurlencode($offerEmail);

        $hmacData = '' .
                $paymentAmount .
                $currencyCode .
                $shipBeforeDate .
                $merchantReference .
                $params['skinCode'] .
                $merchantAccount .
                $sessionValidity .
                $shopperEmail .
                $shopperReference .
                $recurringContract .
                $allowedMethods .
                $blockedMethods .
                $shopperStatement .
                $merchantReturnData .
                $billingAddressType .
                $offset .
                '';
        $hmacDataException = '' .
                $paymentAmount .
                $currencyCode .
                $shipBeforeDate .
                $merchantReference .
                $params['skinCodeException'] .
                $merchantAccount .
                $sessionValidity .
                $shopperEmail .
                $shopperReference .
                $recurringContract .
                $allowedMethods .
                $blockedMethods .
                $shopperStatement .
                $merchantReturnData .
                $billingAddressType .
                $offset .
                '';
        $merchantSig = base64_encode(hash_hmac('sha1', $hmacData, $params['adyanSharedSecret'], true));
        $merchantSigException = base64_encode(hash_hmac('sha1', $hmacDataException, $params['adyanSharedSecretException'], true));
        $result["merchantSig"] = rawurlencode($merchantSig);
        $result["merchantSigException"] = rawurlencode($merchantSigException);
        $result["adyenUrl"] = $params['adyenUrl'];

        return $result;
    }

    public function isAdyenException($request, $params) {
        $result = array();

        $merchantSig = $request->get('merchantSig', '');
        $paymentAmount = $request->get('paymentAmount', '');
        $currencyCode = $request->get('currencyCode', '');
        $shipBeforeDate = $request->get('shipBeforeDate', '');
        $merchantReference = $request->get('merchantReference', '');
        $skinCode = $request->get('skinCode', '');
        $merchantAccount = $request->get('merchantAccount', '');
        $sessionValidity = $request->get('sessionValidity', '');
        $countryCode = $request->get('countryCode', '');
        $merchantReturnData = $request->get('merchantReturnData', '');
        $shopperEmail = $request->get('shopperEmail', '');
        $shopperReference = $request->get('shopperReference', '');
        $allowedMethods = $request->get('allowedMethods', '');
        $blockedMethods = $request->get('blockedMethods', '');
        $offset = $request->get('offset', '');
        $shopperStatement = $request->get('shopperStatement', '');
        $recurringContract = $request->get('recurringContract', '');
        $billingAddressType = $request->get('billingAddressType', '');
        $deliveryAddressType = $request->get('deliveryAddressType', '');
        if (
                !empty($merchantSig)
        ) {
            $result['merchantSig'] = $merchantSig;
            $result['paymentAmount'] = $paymentAmount;
            $result['currencyCode'] = $currencyCode;
            $result['shipBeforeDate'] = $shipBeforeDate;
            $result['merchantReference'] = $merchantReference;
            $result['skinCode'] = $skinCode;
            $result['merchantAccount'] = $merchantAccount;
            $result['sessionValidity'] = $sessionValidity;
            $result['countryCode'] = $countryCode;
            $result['merchantReturnData'] = $merchantReturnData;
            $result['shopperEmail'] = $shopperEmail;
            $result['shopperReference'] = $shopperReference;
            $result['allowedMethods'] = $allowedMethods;
            $result['blockedMethods'] = $blockedMethods;
            $result['offset'] = $offset;
            $result['shopperStatement'] = $shopperStatement;
            $result['recurringContract'] = $recurringContract;
            $result['billingAddressType'] = $billingAddressType;
            $result['deliveryAddressType'] = $deliveryAddressType;
            $result['urlIFrame'] = $params['adyenUrl'];
        }

        return $result;
    }

}
