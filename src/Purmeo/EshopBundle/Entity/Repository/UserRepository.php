<?php

namespace Purmeo\EshopBundle\Entity\Repository;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Purmeo\EshopBundle\Entity\User;
use Purmeo\EshopBundle\Entity\Groups;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface {

    public function createUser($email, $firstname, $lastname, $ip, $em, $controller, $group, $co) {
        $result = false;

        $emailExists = $this->checkExistsEmail($email);

        if (!$emailExists) {

            $randomPassword = uniqid();

            $user = new User();
            $user->setUsername($email);
            $user->setEmail($email);
            $user->setIp($ip);
            $user->addGroup($group);
            $factory = $co->get('security.encoder_factory');
            $encoder = $factory->getEncoder($user);
            $pwd = $encoder->encodePassword($randomPassword, $user->getSalt());
            $user->setPassword($pwd);
            $em->persist($user);
            $em->flush();

            $this->sendRegister($email, $firstname, $lastname, '', $controller);
            $this->sendRegister($email, $firstname, $lastname, $randomPassword, $controller, 'password');

            $result = $user;
        }

        return $result;
    }

    public function checkExistsEmail($email) {

        $user = $this->findOneBy(array('username' => $email));

        if ($user) {
            $result = true;
        } else {
            $result = false;
        }

        return $result;
    }

    public function loadUserByUsername($username) {
        $q = $this
                ->createQueryBuilder('u')
                ->select('u, g')
                ->leftJoin('u.groups', 'g')
                ->where('u.username = :username OR u.email = :email')
                ->setParameter('username', $username)
                ->setParameter('email', $username)
                ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Unable to find an active admin AcmeUserBundle:User object identified by "%s".', $username), null, 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

    public function sendRegister($email, $firstname, $lastname, $randomPassword, $view, $type = 'user') {

        if ($type == 'password')
            $template = 'PurmeoEshopBundle:User:registrationPassword.html.twig';
        else
            $template = 'PurmeoEshopBundle:User:registrationUser.html.twig';

        $message = \Swift_Message::newInstance()
                ->setSubject('Purmeo')
                ->setFrom('service@purmeo.de')
                ->setTo($email)
                ->setBody(
                $view->renderView($template, array(
                    'email' => $email,
                    'password' => $randomPassword,
                    'firstname' => $firstname,
                    'lastname' => $lastname,
                )), 'text/html', 'utf-8');

        $result = $view->get('mailer')->send($message);

        return $result;
    }

}
